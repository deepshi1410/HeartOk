library("mice", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("mice", "ggplot2"))
install.packages(c("caret", "ROCR", "class", "C50", "rpart", "randomForest", "shiny", "tree", "kernlab", "gbm", "e1071"))
download.file("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data", "processed.cleveland.data")
download.file("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.hungarian.data","processed.hungarian.data")
download.file("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.switzerland.data","processed.switzerland.data")
download.file("https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.va.data","processed.va.data")
processed.cleveland <- read.csv("processed.cleveland.data",header=FALSE)
processed.hungarian <- read.csv("processed.hungarian.data", header=FALSE)
processed.switzerland <- read.csv("processed.switzerland.data", header=FALSE)
processed.va <- read.csv("processed.va.data", header=FALSE)
data<-rbind(processed.cleveland,processed.hungarian,processed.switzerland,processed.va)
idx <- data == "?"
is.na(data) <- idx
colnames(data)<-c("age","sex","cp","trestbps","chol","fbs","restecg","thalach","exang","oldpeak","slope","ca","thal","num")
#Converting factors/character into appropriate datatype
data$age <- as.numeric(data$age)
data$sex<-as.factor(data$sex)
data$cp<-as.factor(data$cp)
data$trestbps<-as.numeric(data$trestbps)
data$chol<-as.numeric(data$chol)
data$fbs<-as.factor(data$fbs)
data$restecg<-as.factor(data$restecg)
data$thalach<-as.numeric(data$thalach)
data$exang<-as.factor(data$exang)
data$oldpeak<-as.numeric(data$oldpeak)
data$slope<-as.factor(data$slope)
data$ca <- as.factor(data$ca)
data$thal <- as.factor(data$thal)
data$num<-as.factor(data$num)
#To convert each column of data to numeric
data <- as.data.frame(apply(data, 2, as.numeric))
#Data Preprocessing
data$trestbps = ifelse(is.na(data$trestbps),ave(data$trestbps, FUN = function(x) mean(x, na.rm = 'TRUE')),data$trestbps)
data$trestbps = as.numeric(format(round(data$trestbps, 0)))
data$chol = ifelse(is.na(data$chol),ave(data$chol, FUN = function(x) mean(x, na.rm = 'TRUE')),data$chol)
data$chol = as.numeric(format(round(data$chol, 0)))
data$fbs = ifelse(is.na(data$fbs),ave(data$fbs, FUN = function(x) mean(x, na.rm = 'TRUE')),data$fbs)
data$fbs = as.numeric(format(round(data$fbs, 0)))
data$restecg = ifelse(is.na(data$restecg),ave(data$restecg, FUN = function(x) mean(x, na.rm = 'TRUE')),data$restecg)
data$restecg = as.numeric(format(round(data$restecg, 0)))
data$thalach = ifelse(is.na(data$thalach),ave(data$thalach, FUN = function(x) mean(x, na.rm = 'TRUE')),data$thalach)
data$thalach = as.numeric(format(round(data$thalach, 0)))
data$exang = ifelse(is.na(data$exang),ave(data$exang, FUN = function(x) mean(x, na.rm = 'TRUE')),data$exang)
data$thalach = as.numeric(format(round(data$exang, 0)))
data$oldpeak = ifelse(is.na(data$oldpeak),ave(data$oldpeak, FUN = function(x) mean(x, na.rm = 'TRUE')),data$oldpeak)
data$slope = ifelse(is.na(data$slope),ave(data$slope, FUN = function(x) mean(x, na.rm = 'TRUE')),data$slope)
data$slope = as.numeric(format(round(data$slope, 0)))
data$ca = ifelse(is.na(data$ca),ave(data$ca, FUN = function(x) mean(x, na.rm = 'TRUE')),data$ca)
data$ca = as.numeric(format(round(data$ca, 0)))
data$thal = ifelse(is.na(data$thal),ave(data$thal, FUN = function(x) mean(x, na.rm = 'TRUE')),data$thal)
data$thal = as.numeric(format(round(data$thal, 0)))
data_set <- data
#num gives the presence of heart disease, Present (>1), Not Present(0)
data_set$num[data_set$num > 0] <- 1
data_set$num <- factor(data_set$num, levels = c(0,1), labels = c("negative","positive"))
#clean_data <- data_set
#clean_data <- mice(clean_data)
#Final_data <- complete(clean_data)
Final_data<-data_set
#Divide into training and testing
set.seed(3033)
inTrain<-createDataPartition(y=Final_data$num,p=0.7,list=F)
training<-Final_data[inTrain,]
testing<-Final_data[-inTrain,]
dim(training);dim(testing)
# summary(training)
#
# featurePlot(x=training[,c("age","cp","trestbps","chol","thalach","oldpeak")],
#             y=training$num,plot = "pairs",scales=list(x=list(relation="free"), y=list(relation="free")), auto.key=list(columns=2))
# featurePlot(x=training[,c("age","cp","trestbps","chol","thalach","oldpeak")],
#             y=training$num,plot = "density",scales=list(x=list(relation="free"), y=list(relation="free")), auto.key=list(columns=2))
mahal=mahalanobis(training[,-c(14)],colMeans(training[,-c(14)]),cov(training[,-c(14)],use = "pairwise.complete.obs"))
cutoff=qchisq(.999,ncol(training[,-c(14)]))
training=training[mahal<cutoff,]
dim(training)
#training model using ML algorithms
# model_rf<-train(num~.,data=training,method="rf",trControl=trainControl(method="cv"),number=10)
# model_glm<-train(num~.,data=training,method="glm",preProcess="pca")
# model_knn <- train(num ~., method = "knn", data = training,tuneLength = 10,  tuneGrid=data.frame(k=1:5),
#                    trControl = trainControl(
#                      method = "cv"))
#
# # accuracy improved after increase the k and preProcess "pca" (signal extraction (11), centered (11), scaled (11) )
# model_knn <- train(num ~., method = "knn", preProcess="pca",data = training,tuneLength = 10,  tuneGrid=data.frame(k=5:25),
#                    trControl = trainControl(
#                      method = "cv"))
#
# #Best Accuracy Using GBM, Creating App through this.
# model_svm = svm(formula = num ~ .,
#                  data = training,
#                  type = 'C-classification',
#                  kernel = 'linear')
model_gbm<-train(num~.,data=training,method="gbm")
# sigDist <- sigest(num ~., data = training, frac = 1)
# svmTuneGrid <- data.frame(.sigma = sigDist[1], .C = 2^(5:25))
# model_svm <- train(num ~.,
#                 data = training,
#                 method = "svmRadial",
#                 preProc = c("center", "scale"),
#                 tuneGrid = svmTuneGrid,
#                 trControl = trainControl(method = "repeatedcv", repeats = 5,
#                                          classProbs =  TRUE))
# pred_rf_p<-predict(model_rf,newdata=testing,method="class",type="prob")
# pred_rf_r<-predict(model_rf,newdata = testing,method="class",type="raw")
pred_gbm_p<-predict(model_gbm,newdata=testing,method="class",type="prob")
pred_gbm_r<-predict(model_gbm,newdata = testing,method="class",type="raw")
# pred_svm_p<-predict(model_svm,newdata=testing,method="class",type="prob")
# pred_svm_r<-predict(model_svm,newdata = testing,method="class",type="raw")
# pred_glm_p<-predict(model_glm,newdata=testing,type="prob")
# pred_glm_r<-predict(model_glm,newdata=testing,type="raw")
# pred_knn_p<-predict(model_knn,newdata=testing,type="prob")
# pred_knn_r<-predict(model_knn,newdata=testing,type="raw")
# pred_svm_p<-predict(model_svm,newdata=testing,method="class",type="prob")
# pred_svm_r<-predict(model_svm,newdata = testing,method="class",type="raw")
# pred_roc_rf<-prediction(pred_rf_p$positive,testing$num)
# perf_roc_rf<-performance(pred_roc_rf,"tpr", "fpr")
# plot(perf_roc_rf,col=1,main="ROC curves comparing classification performance of 4 machine learning models")
# auc_rf<- performance(pred_roc_rf,"auc")
# auc_rf
#
# pred_roc_glm<-prediction(pred_glm_p$positive,testing$num)
# perf_roc_glm<-performance(pred_roc_glm,"tpr", "fpr")
# plot(perf_roc_glm,add=T,col=2)
# auc_glm<- performance(pred_roc_glm,"auc")
# auc_glm
#
# pred_roc_knn<-prediction(pred_knn_p$positive,testing$num)
# perf_roc_knn<-performance(pred_roc_knn,"tpr", "fpr")
# plot(perf_roc_knn,col=3,add=T)
# auc_knn<- performance(pred_roc_knn,"auc")
# auc_knn
# pred_roc_gbm<-prediction(pred_gbm_p$positive,testing$num)
# perf_roc_gbm<-performance(pred_roc_gbm,"tpr", "fpr")
# plot(perf_roc_gbm,col=4,add=T)
# auc_gbm<- performance(pred_roc_gbm,"auc")
# auc_gbm
# pred_roc_svm<-prediction(pred_svm_p$positive,testing$num)
# perf_roc_svm<-performance(pred_roc_svm,"tpr", "fpr")
# plot(perf_roc_svm,col=5,add=T)
# auc_svm<- performance(pred_roc_svm,"auc")
# auc_svm
# legend(0.1, 0.3, c('rf','glm','knn','gbm'), 1:4 ,seg.len = 0.01,text.width=0.05,horiz = T)
Evaluation_output<- function(x,y){
TP  <- sum(x == "positive" & y== "positive")
FP   <- sum(x == "negative" & y== "positive")
TN  <- sum(x == "negative" & y == "negative")
FN   <- sum(x == "positive" & y == "negative")
Accuracy<-(TP+TN)/(TP+FP+TN+FN)
Precision<-TP/(TP+FP)
Recall_Sensitivity<-TP/(TP+FN)
#F1<-2*Precision*Recall_Sensitivity/(Precision+Recall_Sensitivity)
row.names <- c("Prediction_T", "Prediction_F" )
col.names <- c("Test_T", "Test_F")
Outcome_Matrix<-cbind(Outcome = row.names, as.data.frame(matrix(
c(TP, FN, FP, TP) ,
nrow = 2, ncol = 2,dimnames = list(row.names, col.names))))
cat("Accuracy:",Accuracy)
cat("\nPrecision:",Precision)
cat("\nRecall: ",Recall_Sensitivity,"\n")
# cat("F:",F1)
print(Outcome_Matrix)
}
# Evaluation_output(pred_rf_r,testing$num)
# Evaluation_output(pred_glm_r,testing$num)
# Evaluation_output(pred_knn_r,testing$num)
Evaluation_output(pred_gbm_r,testing$num)
# Evaluation_output(pred_svm_r,testing$num)
# Evaluation_output(pred_svm_r,testing$num)
data_exercises <- read.csv("exercises.csv" )
BP <- read.csv("bp.csv")
colnames(BP) <- c("generic","common","use","side_effect","precaution")
BP$generic <- as.character(BP$generic)
BP$common <- as.character(BP$common)
BP$use <- as.character(BP$use)
BP$side_effect <- as.character(BP$side_effect)
BP$precaution <- as.character(BP$precaution)
sugar <- read.csv("sugar.csv")
colnames(sugar) <- c("generic","common","use","side_effect","precaution")
sugar$generic <- as.character(sugar$generic)
sugar$common <- as.character(sugar$common)
sugar$use <- as.character(sugar$use)
sugar$side_effect <- as.character(sugar$side_effect)
sugar$precaution <- as.character(sugar$precaution)
chol <- read.csv("chol.csv")
colnames(chol) <- c("generic","common","use","side_effect","precaution")
chol$generic <- as.character(chol$generic)
chol$common <- as.character(chol$common)
chol$use <- as.character(chol$use)
chol$side_effect <- as.character(chol$side_effect)
chol$precaution <- as.character(chol$precaution)
CP <- read.csv("CP.csv")
colnames(CP) <- c("generic","common","use","side_effect","precaution")
CP$generic <- as.character(CP$generic)
CP$common <- as.character(CP$common)
CP$use <- as.character(CP$use)
CP$side_effect <- as.character(CP$side_effect)
CP$precaution <- as.character(CP$precaution)
exercises <- read.csv("exercises.csv")
colnames(exercises) <- c("param","age","exercises")
exercises$param <- as.character(exercises$param)
exercises$age <- as.numeric(exercises$age)
exercises$exercises <- as.character(exercises$exercises)
chol_ex <- subset(exercises,param=="chol")
fbs_ex <- subset(exercises,param=="fbs")
heart_rate_ex <- subset(exercises,param=="max. heart rate")
exang_ex<-subset(exercises,param=="exang")
bp_ex<-subset(exercises,param=="resting bp")
upperBound <- function(n,p){
l <- 0
l <- as.integer(l)
r <- n
r <- as.integer(n)
i <- 1/n
while( r-l > 1)
{
m <- (l+r)/2
m <- as.integer(m)
#print(m)
if(m*i <= p)
l=m
else
r=m
}
return(r)
}
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
fieldsMandatory <- c("aadhar","name")
source("main.R")
#run1<-parse("main.R")
#eval(run1)
# Define server logic required to draw a histogram
shinyServer(
function(input,output,session){
observe({
mandatoryFilled <-
vapply(fieldsMandatory,
function(x) {
!is.null(input[[x]]) && input[[x]] != ""
},
logical(1))
mandatoryFilled <- all(mandatoryFilled)
shinyjs::toggleState(id = "submit", condition = mandatoryFilled)
})
observeEvent(
input$submit,{
updateTabsetPanel(session, "inTabset", selected = "panel2")
}
)
observeEvent(
input$jumpToReport,{
updateTabsetPanel(session, "inTabset", selected = "panel4")
}
)
observeEvent(
input$jumpToRecords,{
updateTabsetPanel(session, "inTabset", selected = "panel3")
}
)
result<-eventReactive(input$submit,
{
ha<-matrix(ncol = 13,c(as.numeric(input$age),as.numeric(input$sex),as.numeric(input$cp),as.numeric(input$trestbps),as.numeric(input$chol),as.numeric(input$fbs),as.numeric(input$restecg),as.numeric(input$thalach),as.numeric(input$exang),as.numeric(input$oldpeak),as.numeric(input$slope),as.numeric(input$ca),as.numeric(input$thal)))
colnames(ha)<-c("age","sex","cp","trestbps","chol","fbs","restecg","thalach","exang","oldpeak","slope","ca","thal")
k<-as.data.frame(ha)
#write.csv(k,"file.csv",row.names = FALSE)
pred_system<-predict(model_gbm,k,method="class",type="prob")
date <- format(Sys.Date(),"%d-%m-%y")
day <- format(Sys.time(), "%A")
time <- format(Sys.time(), "%X")
pred_res <- data.frame("Date" = date, "Day" = day, "Time" = time, "Probability" = pred_system$positive)
f <- paste(input$aadhar,".csv",sep = "")
if(!file.exists(f))
write.csv(pred_res,f,row.names = FALSE)
else
{
df <- read.csv(f)
df <- rbind(pred_res,df)
write.csv(df,f,row.names = FALSE)
}
#output$plot<-hist(pred_result)
#output$input_result<-renderTable({paste(pred_result)})
#assign(res, pred_result$positive, envir = .GlobalEnv)
pred_system$positive
})
output$text <- renderText({paste("The probability of heart disease is ",result(),"")})
# output$plot <- renderPlot({
#     featurePlot(x=training[,c("age","cp","trestbps","chol","thalach","oldpeak")],
#                 y=training$num,plot = "density",scales=list(x=list(relation="free"), y=list(relation="free")), auto.key=list(columns=2))
#
#
# })
mydata <- eventReactive(input$submit, {
read.csv(paste(input$aadhar,".csv",sep = ""))
})
output$table <- renderTable(
mydata()
)
output$report <- renderUI(
{
f <- paste(input$aadhar,".csv",sep = "")
res <- read.csv(f)
res <- res[[4]][[1]]
print(res)
ans <- paste("<b> Your probablity of heart of disease is </b>",res)
name <- paste("<b>","Name: ","</b>",input$name)
age <- paste("<b>","Age: ","</b>",input$age)
sex <- paste("<b>","Gender: ","</b>")
#------------------------------------------------
line <- paste("<b>----------------------------------------------------------------------------------------------------------------------------------------------</b>")
if(input$sex == 0)
sex <- paste(sex,"Female")
else
sex <- paste(sex,"Male")
bp <- paste("<b>","Resting Blood Pressure: ","</b>",as.character(input$trestbps),"mmHg")
bp_info <- "BP is Normal"
#FOR FASTING BLOOD SUGAR
if(input$trestbps>=140){
r <- nrow(BP)
i <- upperBound(r,res)
gen_name <- paste("<b>","Drug (Generic Name) :- ","</b>",BP[i,"generic"])
com_name <- paste("<b>","Drug (Common Name) :- ","</b>",BP[i,"common"])
use <- paste("<b>","Uses :- ","</b>",BP[i,"use"])
side <- paste("<b>","Side Effects :- ","</b>",BP[i,"side_effect"])
pre <- paste("<b>","Precautions :- ","</b>",BP[i,"precaution"])
bp_info <- paste("BP should be controlled","<center><h4>Medication to follow</center></h4>",gen_name,com_name,use,side,pre,sep = "</br>")
}
#FOR SUGAR
su <- paste("<b>","Fasting Blood Sugar is greater than 120mg/dl ","</b>")
su_info <- "Fasting Blood Sugar is Normal"
if(input$fbs==1){
r <- nrow(sugar)
i <- upperBound(r,res)
gen_name <- paste("<b>","Drug (Generic Name) :- ","</b>",sugar[i,"generic"])
com_name <- paste("<b>","Drug (Common Name) :- ","</b>",sugar[i,"common"])
use <- paste("<b>","Uses :- ","</b>",sugar[i,"use"])
side <- paste("<b>","Side Effects :- ","</b>",sugar[i,"side_effect"])
pre <- paste("<b>","Precautions :- ","</b>",sugar[i,"precaution"])
su_info <- paste("Blood Sugar should be controlled","<center><h4>Medication to follow</center></h4>",gen_name,com_name,use,side,pre,sep = "</br>")
}
#FOR CHOLESTEROL
ch <- paste("<b>","Serum Cholesterol: ","</b>",as.character(input$trestbps),"mg/dl")
ch_info <- "Serum Cholesterol is Normal"
if(input$chol>=100){
r <- nrow(chol)
i <- upperBound(r,res)
gen_name <- paste("<b>","Drug (Generic Name) :- ","</b>",chol[i,"generic"])
com_name <- paste("<b>","Drug (Common Name) :- ","</b>",chol[i,"common"])
use <- paste("<b>","Uses :- ","</b>",chol[i,"use"])
side <- paste("<b>","Side Effects :- ","</b>",chol[i,"side_effect"])
pre <- paste("<b>","Precautions :- ","</b>",chol[i,"precaution"])
ch_info <- paste("Serum Cholesterol should be controlled","<center><h4>Medication to follow</center></h4>",gen_name,com_name,use,side,pre,sep = "</br>")
}
#CHEST PAIN
cp <- paste("You have typical angina pain")
cp_info <- ""
if(input$cp == 1 && res>=0.80){
r <- nrow(CP)
i <- upperBound(r,res)
gen_name <- paste("<b>","Drug (Generic Name) :- ","</b>",CP[1,"generic"])
com_name <- paste("<b>","Drug (Common Name) :- ","</b>",CP[1,"common"])
use <- paste("<b>","Uses :- ","</b>",CP[1,"use"])
side <- paste("<b>","Side Effects :- ","</b>",CP[1,"side_effect"])
pre <- paste("<b>","Precautions :- ","</b>",CP[1,"precaution"])
cp_info <- paste("You have high chances of a heart disease","<center><h4>Medication to follow</center></h4>",gen_name,com_name,use,side,pre,sep = "</br>")
}
else if(input$cp == 1 && res<0.80){
gen_name <- paste("<b>","Drug (Generic Name) :- ","</b>",CP[2,"generic"])
com_name <- paste("<b>","Drug (Common Name) :- ","</b>",CP[2,"common"])
use <- paste("<b>","Uses :- ","</b>",CP[2,"use"])
side <- paste("<b>","Side Effects :- ","</b>",CP[2,"side_effect"])
pre <- paste("<b>","Precautions :- ","</b>",CP[2,"precaution"])
cp_info <- paste("You have low chances of a heart disease","<center><h4>Medication to follow</center></h4>",gen_name,com_name,use,side,pre,sep = "</br>")
}
else if(input$cp==2){
gen_name <- paste("<b>","Drug (Generic Name) :- ","</b>",CP[3,"generic"])
com_name <- paste("<b>","Drug (Common Name) :- ","</b>",CP[3,"common"])
use <- paste("<b>","Uses :- ","</b>",CP[3,"use"])
side <- paste("<b>","Side Effects :- ","</b>",CP[3,"side_effect"])
pre <- paste("<b>","Precautions :- ","</b>",CP[3,"precaution"])
cp_info <- paste("You have unstable Angina","<center><h4>Medication to follow</center></h4>",gen_name,com_name,use,side,pre,sep = "</br>")
cp <- "You have unstable Angina pain"
}
else if(input$cp==3)
{
cp <- paste("You have Non-Angina pain")
cp_info <- paste("<b>Non Angina pain can be treated with exercises.","Refer to excercises for more details.</b>")
}
else if(input$cp==4)
{
gen_name <- paste("<b>","Drug (Generic Name) :- ","</b>",CP[3,"generic"])
com_name <- paste("<b>","Drug (Common Name) :- ","</b>",CP[3,"common"])
use <- paste("<b>","Uses :- ","</b>",CP[3,"use"])
side <- paste("<b>","Side Effects :- ","</b>",CP[3,"side_effect"])
pre <- paste("<b>","Precautions :- ","</b>",CP[3,"precaution"])
cp_info <- paste("","<center><h4>Medication to follow</center></h4>",gen_name,com_name,use,side,pre,sep = "</br>")
cp <- "Asymptotic Angina pain is the condition when there is a attack but pain is not felt."
}
extra <- ""
if(res>0.90)
{
gen_name <- paste("<b>","Drug (Generic Name) :- ","</b>",CP[3,"generic"])
com_name <- paste("<b>","Drug (Common Name) :- ","</b>",CP[3,"common"])
use <- paste("<b>","Uses :- ","</b>",CP[3,"use"])
side <- paste("<b>","Side Effects :- ","</b>",CP[3,"side_effect"])
pre <- paste("<b>","Precautions :- ","</b>",CP[3,"precaution"])
extra <- paste("","<center><h4>Medication to follow</center></h4>",gen_name,com_name,use,side,pre,sep = "</br>")
}
#EXERCISES
i <- input$age
ex <- "<center><h3>EXERCISES TO FOLLOW</h3></center>"
ex1 <- ""
if(input$trestbps>=140)
ex1 <- paste("<b>To control BP : </b>",bp_ex[i-29,"exercises"])
ex2<-" "
if(input$exang==1)
ex2 <- paste("<b>If angina induces due to exercises, follow lighweight exercises like : </b>",exang_ex[i,"exercises"])
ex3 <- ""
if(input$fbs==1)
ex3 <- paste("<b>To control Blood Sugar : </b>",fbs_ex[i-34,"exercises"])
ex4 <- ""
if(input$thalach>75)
ex4 <- paste("<b>Heart rate shoud be nomalized</b>",heart_rate_ex[i+1,"exercises"])
ex5 <- ""
if(input$chol>=100)
ex5 <- paste("<b>Serum Cholesterol should be controlled : </b>",chol_ex[i-34,"exercises"])
ex <- paste(ex,"</br>",ex1,"</br>",ex2,"</br>",ex3,"</br>",ex4,"</br>",ex5)
if(ex1=="" && ex2=="" && ex3=="" && ex4=="" && ex5=="")
ex <- paste("You are free to do any kinds of exercises")
HTML(paste(name,age,sex,ans,"</br>",line,bp,bp_info,line,su,su_info,line,ch,ch_info,line,cp,cp_info,extra,line,ex,line, sep = '<br/>'))
}
) #End of report
}#End of function
)
library(shiny)
library(shinyjs)
fieldsMandatory <- c("aadhar","name")
labelMandatory <- function(label) {
tagList(
label,
span("*", class = "mandatory_star")
)
}
appCSS <- ".mandatory_star { color: red; }"
shinyUI(
fluidPage(
shinyjs::useShinyjs(),
shinyjs::inlineCSS(appCSS),
navbarPage("->", id = "inTabset",
tabPanel("Information",
sidebarLayout(position="right",
# Entry variables
sidebarPanel(h3("Entry variables"),
div(
id = "form",
textInput("name", labelMandatory("Enter your name"),""),
textInput("aadhar",labelMandatory("Enter your Aadhar UID"),""),
numericInput("age","Enter the patient's age","",min = 0,max = 100,value = 89),
radioButtons("sex","Select gender",choices = c("male"= 1,"female"=0), selected = 1),
radioButtons("cp","Select the chest pain type",choices = c("Typical angina"=1,"Unstable angina"=2,"Non-anginal pain"=3, "Asymptomatic pain"=4),selected = 1),
numericInput("trestbps","Resting blood pressure(mmHg)",value = 140),
numericInput("chol","Serum cholestoral in mg/dl","120"),
radioButtons("fbs","fasting blood sugar > 120 mg/dl",choices = c("Yes"= 1,"No"=0),selected = 1),
radioButtons("restecg", "Resting electrocardiographic results",choices = c( "normal"=1,
" ST-T wave abnormality (T wave inversions and/or ST elevation or depression of > 0.05 mV"=2,
"showing probable or definite left ventricular hypertrophy by Estes' criteria"=3),selected = 2),
numericInput("thalach","maximum heart rate achieved",value = 90),
radioButtons("exang" ,"exercise induced angina" ,choices = c("Yes"=1,"No" = 0),selected = 1),
numericInput("oldpeak"," ST depression induced by exercise relative to rest(-2,6)",min=-3,max=6,value =2),
radioButtons("slope" ,"the slope of the peak exercise ST segment " ,choices = c("upslope"=1,"flat" = 2,"downslope"=3),selected = 2),
radioButtons("ca","Number of major vessels(0-3)",choices = c("0"=0,"1"=1,"2"=2,"3"=3),selected = 1),
radioButtons("thal","Thalassemia",choices = c("Normal"=3, "Fixed Defect"=6,"Reversable Defect"=7),selected = 7),
actionButton("submit","Submit",class = "btn-primary")
)),
#Display results
mainPanel(
""
))),
tabPanel("Text", value = "panel2", h3(tableOutput("text")),
actionButton("jumpToReport", "Jump to Report"),
actionButton("jumpToRecords", "Jump to Previous Records")
),
#tabPanel("Plot", plotOutput("plot")),
tabPanel("Previous Records", value = "panel3", tableOutput("table")),
tabPanel("Report", value = "panel4", htmlOutput("report"))
)
)
)
install.packages("shinyjs")
runApp()
